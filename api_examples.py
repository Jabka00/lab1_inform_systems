#!/usr/bin/env python3
"""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è API —Å–µ—Ä–≤—ñ—Å—ñ–≤
"""

import requests
import json
import time

# –ë–∞–∑–æ–≤—ñ URL —Å–µ—Ä–≤—ñ—Å—ñ–≤
AUTH_URL = "http://localhost:5000"
METRICS_URL = "http://localhost:8000"

def demo_auth_service():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ —Å–µ—Ä–≤—ñ—Å–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
    print("üîê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
    print("-" * 40)
    
    # 1. –í—Ö—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print("\n1. –í—Ö—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    login_data = {
        "username": "admin",
        "password": "admin123"
    }
    
    response = requests.post(f"{AUTH_URL}/login", json=login_data)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        auth_data = response.json()
        token = auth_data['token']
        print(f"Token –æ—Ç—Ä–∏–º–∞–Ω–æ: {token[:50]}...")
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É
        print("\n2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É:")
        headers = {'Authorization': f'Bearer {token}'}
        response = requests.get(f"{AUTH_URL}/verify", headers=headers)
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        
        # 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
        print("\n3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:")
        response = requests.get(f"{AUTH_URL}/profile", headers=headers)
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        
        # 4. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        print("\n4. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
        new_user = {
            "username": f"testuser_{int(time.time())}",
            "email": "test@example.com",
            "password": "password123"
        }
        
        response = requests.post(f"{AUTH_URL}/register", json=new_user)
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        
        # 5. –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
        print("\n5. –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
        response = requests.get(f"{AUTH_URL}/admin/users", headers=headers)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            users = response.json()['users']
            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
            for user in users[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 3
                print(f"  - {user['username']} ({user['role']}) - {user['email']}")
        
        return token
    else:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: {response.text}")
        return None

def demo_metrics_service():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ —Å–µ—Ä–≤—ñ—Å–æ–º –º–µ—Ç—Ä–∏–∫"""
    print("\n\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –º–µ—Ç—Ä–∏–∫")
    print("-" * 40)
    
    # 1. –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    print("\n1. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å:")
    response = requests.get(METRICS_URL)
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    # 2. Health check
    print("\n2. Health check:")
    response = requests.get(f"{METRICS_URL}/health")
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    # 3. –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è Prometheus
    print("\n3. Prometheus –º–µ—Ç—Ä–∏–∫–∏:")
    response = requests.get(f"{METRICS_URL}/metrics")
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        metrics_text = response.text
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
        lines = metrics_text.split('\n')
        metric_lines = [line for line in lines if line and not line.startswith('#')]
        
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(metric_lines)} —Ä—è–¥–∫—ñ–≤ –º–µ—Ç—Ä–∏–∫")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Ü—ñ–∫–∞–≤–∏—Ö –º–µ—Ç—Ä–∏–∫
        interesting_metrics = [
            'total_users_count',
            'active_users_count',
            'total_products_count',
            'pending_orders_count',
            'total_revenue'
        ]
        
        print("\n–û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:")
        for metric in interesting_metrics:
            for line in metric_lines:
                if line.startswith(metric):
                    print(f"  {line}")
                    break

def demo_prometheus_queries():
    """–ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Prometheus"""
    print("\n\nüéØ –ü—Ä–∏–∫–ª–∞–¥–∏ Prometheus –∑–∞–ø–∏—Ç—ñ–≤")
    print("-" * 40)
    
    prometheus_url = "http://localhost:9090"
    
    queries = [
        ("–ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", "active_users_count"),
        ("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "total_users_count"),
        ("–®–≤–∏–¥–∫—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å", "rate(orders_total[5m])"),
        ("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –∑–∞–ø–∏—Ç—ñ–≤", "rate(mysql_query_duration_seconds_sum[5m]) / rate(mysql_query_duration_seconds_count[5m])"),
        ("–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥", "total_revenue")
    ]
    
    for description, query in queries:
        print(f"\n{description}:")
        print(f"Query: {query}")
        
        try:
            response = requests.get(f"{prometheus_url}/api/v1/query", 
                                  params={'query': query}, 
                                  timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                if data['status'] == 'success' and data['data']['result']:
                    result = data['data']['result'][0]
                    value = result['value'][1]
                    print(f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {value}")
                else:
                    print("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
            else:
                print(f"–ü–æ–º–∏–ª–∫–∞: {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")

def demo_system_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –º—ñ–∂ —Å–µ—Ä–≤—ñ—Å–∞–º–∏"""
    print("\n\nüîó –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏")
    print("-" * 40)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    token = demo_auth_service()
    
    if token:
        print("\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
        demo_metrics_service()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Prometheus
        demo_prometheus_queries()
        
        print("\nüéâ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –≤ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó!")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        print("1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ Grafana: http://localhost:3000 (admin/admin123)")
        print("2. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –¥–∞—à–±–æ—Ä–¥ 'MySQL Monitoring Dashboard'")
        print("3. –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π—Ç–µ –∑ Prometheus: http://localhost:9090")
        print("4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Auth API –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤")
    else:
        print("\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è API —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
    print("=" * 50)
    
    try:
        demo_system_integration()
    except KeyboardInterrupt:
        print("\n\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        print("\nüîß –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞:")
        print("   docker-compose up -d")

if __name__ == "__main__":
    main()
