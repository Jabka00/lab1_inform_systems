#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É MySQL
"""

import requests
import time
import json
import sys

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
SERVICES = {
    'auth': 'http://localhost:5000',
    'metrics': 'http://localhost:8000',
    'prometheus': 'http://localhost:9090',
    'grafana': 'http://localhost:3000'
}

def test_service_health(service_name, url):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É"""
    try:
        if service_name == 'grafana':
            # Grafana –º–∞—î —ñ–Ω—à–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            response = requests.get(f"{url}/api/health", timeout=5)
        elif service_name == 'prometheus':
            # Prometheus –º–∞—î —ñ–Ω—à–∏–π endpoint
            response = requests.get(f"{url}/-/healthy", timeout=5)
        else:
            # –Ü–Ω—à—ñ —Å–µ—Ä–≤—ñ—Å–∏ –º–∞—é—Ç—å /health
            response = requests.get(f"{url}/health", timeout=5)
        
        if response.status_code == 200:
            print(f"‚úÖ {service_name.upper()}: –°–µ—Ä–≤—ñ—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            return True
        else:
            print(f"‚ùå {service_name.upper()}: –ü–æ–º–∏–ª–∫–∞ {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå {service_name.upper()}: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ({e})")
        return False

def test_auth_service():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
    print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...")
    
    auth_url = SERVICES['auth']
    
    # –¢–µ—Å—Ç –≤—Ö–æ–¥—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    login_data = {
        "username": "admin",
        "password": "admin123"
    }
    
    try:
        response = requests.post(f"{auth_url}/login", json=login_data, timeout=10)
        
        if response.status_code == 200:
            token = response.json().get('token')
            print("‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
            # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω—É
            headers = {'Authorization': f'Bearer {token}'}
            verify_response = requests.get(f"{auth_url}/verify", headers=headers, timeout=5)
            
            if verify_response.status_code == 200:
                print("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π")
                return token
            else:
                print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π")
                return None
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤—ñ—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        return None

def test_metrics_endpoint():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è endpoint –º–µ—Ç—Ä–∏–∫"""
    print("\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è endpoint –º–µ—Ç—Ä–∏–∫...")
    
    try:
        response = requests.get(f"{SERVICES['metrics']}/metrics", timeout=10)
        
        if response.status_code == 200:
            metrics_data = response.text
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
            expected_metrics = [
                'total_users_count',
                'active_users_count',
                'total_products_count',
                'pending_orders_count',
                'total_revenue'
            ]
            
            found_metrics = []
            for metric in expected_metrics:
                if metric in metrics_data:
                    found_metrics.append(metric)
            
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(found_metrics)}/{len(expected_metrics)} –º–µ—Ç—Ä–∏–∫")
            
            if len(found_metrics) == len(expected_metrics):
                print("‚úÖ –í—Å—ñ –æ—á—ñ–∫—É–≤–∞–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
                return True
            else:
                missing = set(expected_metrics) - set(found_metrics)
                print(f"‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏: {missing}")
                return False
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ metrics endpoint: {e}")
        return False

def test_prometheus_targets():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–ª–µ–π Prometheus"""
    print("\nüéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–ª–µ–π Prometheus...")
    
    try:
        response = requests.get(f"{SERVICES['prometheus']}/api/v1/targets", timeout=10)
        
        if response.status_code == 200:
            targets_data = response.json()
            
            if targets_data.get('status') == 'success':
                active_targets = targets_data['data']['activeTargets']
                
                target_status = {}
                for target in active_targets:
                    job = target['labels']['job']
                    health = target['health']
                    target_status[job] = health
                
                print("üìã –°—Ç–∞—Ç—É—Å —Ü—ñ–ª–µ–π:")
                for job, health in target_status.items():
                    status = "‚úÖ" if health == "up" else "‚ùå"
                    print(f"  {status} {job}: {health}")
                
                up_targets = sum(1 for health in target_status.values() if health == "up")
                total_targets = len(target_status)
                
                print(f"\nüìä –ó–∞–≥–∞–ª–æ–º: {up_targets}/{total_targets} —Ü—ñ–ª–µ–π –∞–∫—Ç–∏–≤–Ω—ñ")
                return up_targets == total_targets
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Prometheus")
                return False
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Prometheus: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Prometheus: {e}")
        return False

def test_grafana_datasources():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª –¥–∞–Ω–∏—Ö Grafana"""
    print("\nüìà –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª –¥–∞–Ω–∏—Ö Grafana...")
    
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö
        # (—Ü–µ –º–æ–∂–µ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ)
        response = requests.get(f"{SERVICES['grafana']}/api/datasources", 
                              auth=('admin', 'admin123'), timeout=10)
        
        if response.status_code == 200:
            datasources = response.json()
            
            if datasources:
                print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö:")
                for ds in datasources:
                    print(f"  üìä {ds['name']} ({ds['type']})")
                return True
            else:
                print("‚ö†Ô∏è  –î–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
        else:
            print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Grafana: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É MySQL")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
    
    service_results = {}
    for service_name, url in SERVICES.items():
        service_results[service_name] = test_service_health(service_name, url)
    
    # –î–µ—Ç–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    auth_result = test_auth_service()
    metrics_result = test_metrics_endpoint()
    prometheus_result = test_prometheus_targets()
    grafana_result = test_grafana_datasources()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üìã –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("=" * 50)
    
    print("\nüîß –î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—ñ–≤:")
    for service, result in service_results.items():
        status = "‚úÖ –û–ö" if result else "‚ùå –ü–û–ú–ò–õ–ö–ê"
        print(f"  {service.upper()}: {status}")
    
    print("\nüß™ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏:")
    print(f"  –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è: {'‚úÖ –û–ö' if auth_result else '‚ùå –ü–û–ú–ò–õ–ö–ê'}")
    print(f"  –ú–µ—Ç—Ä–∏–∫–∏: {'‚úÖ –û–ö' if metrics_result else '‚ùå –ü–û–ú–ò–õ–ö–ê'}")
    print(f"  Prometheus: {'‚úÖ –û–ö' if prometheus_result else '‚ùå –ü–û–ú–ò–õ–ö–ê'}")
    print(f"  Grafana: {'‚úÖ –û–ö' if grafana_result else '‚ö†Ô∏è  –ß–ê–°–¢–ö–û–í–ê'}")
    
    # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_services_up = all(service_results.values())
    critical_tests_pass = auth_result and metrics_result and prometheus_result
    
    if all_services_up and critical_tests_pass:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ü–†–ê–¶–Æ–Ñ –ö–û–†–ï–ö–¢–ù–û!")
        print("\nüìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
        print("  ‚Ä¢ Grafana: http://localhost:3000 (admin/admin123)")
        print("  ‚Ä¢ Prometheus: http://localhost:9090")
        print("  ‚Ä¢ Auth API: http://localhost:5000")
        print("  ‚Ä¢ Metrics: http://localhost:8000/metrics")
        return 0
    else:
        print("\n‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –ü–†–ê–¶–Æ–Ñ –ó –ü–û–ú–ò–õ–ö–ê–ú–ò")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        if not all_services_up:
            print("  ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ: docker-compose ps")
            print("  ‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ª–æ–≥–∏: docker-compose logs")
        if not critical_tests_pass:
            print("  ‚Ä¢ –ó–∞—á–µ–∫–∞–π—Ç–µ –ø–æ–≤–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ (2-3 —Ö–≤–∏–ª–∏–Ω–∏)")
            print("  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å–∏: docker-compose restart")
        return 1

if __name__ == "__main__":
    sys.exit(main())
